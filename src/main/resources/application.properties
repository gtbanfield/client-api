# Logging
logging.file=app.log
server.port=8080
server.servlet.contextPath=/client-api/v1.0
# Spring Security default user name and password
spring.security.user.name=actuator
spring.security.user.password=actuator
spring.security.user.roles=ACTUATOR_ADMIN

# INFO ENDPOINT CONFIGURATION
info.app.name=@project.name@
info.app.description=@project.description@
info.app.version=@project.version@
info.app.encoding=@project.build.sourceEncoding@
info.app.java.version=@java.version@

# SHUTDOWN ENDPOINT (ShutdownEndpoint)
management.endpoint.shutdown.enabled=true

# HEALTH ENDPOINT
management.endpoint.health.show-details=always

# ENDPOINTS WEB CONFIGURATION
management.endpoints.web.exposure.include=*
spring.security.enabled=false


spring.datasource.url=jdbc:mysql://127.0.0.1:3306/my_database
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver




#1. Use Workload Identity (Recommended)
#Instead of using explicit credentials, enable Workload Identity so your GKE service account can authenticate directly:
#
#sh
#gcloud container clusters update your-cluster \
#  --workload-pool=your-project.svc.id.goog
#
#2. Bind IAM Roles to the GKE Service Account
#Make sure your service account has the correct permissions to access Cloud SQL:
#
#sh
#gcloud projects add-iam-policy-binding your-project-id \
#  --member="serviceAccount:your-gke-sa@your-project-id.iam.gserviceaccount.com" \
#  --role="roles/cloudsql.client"
#
#3. Modify the Database Connection URL
#Since Cloud SQL Auth Proxy runs inside your GKE cluster as a sidecar container, update application.properties:
#
#properties
#spring.datasource.url=jdbc:mysql://127.0.0.1:3306/my_database
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#
#You do not need a username or password when using IAM authentication.
#
#4. Deploy Cloud SQL Auth Proxy as a Sidecar
#Inside your Kubernetes deployment YAML, add the proxy container:
#
#yaml
#containers:
#- name: cloud-sql-auth-proxy
#image: gcr.io/cloudsql-docker/gce-proxy:latest
#args:
#- "--instances=your-project-id:your-region:your-instance-name=tcp:3306"
#securityContext:
#runAsNonRoot: true
#
#5. Test Your Connection
#Once deployed, check if your application can connect:
#
#sh
#kubectl logs -f <pod-name>